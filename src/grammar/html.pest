html = _{ SOI ~ doctype? ~ node* ~ EOI }

doctype = { lt_bang ~ ^"doctype" ~ attr* ~ gt }

///
/// Nodes
///
node = _{ comment | element | text }

comment = { comment_start ~ (!comment_end ~ ANY)* ~ comment_end }
comment_start = _{ lt_bang ~ "--" }
comment_end = _{ "--" ~ gt }

text = { (!(lt | comment_start) ~ ANY) + } // Will break if text includes '<'

element = { void_element | normal_element | raw_text_element | dangling_element }

///
/// Attributes
///
attr = { attr_key ~ (equal ~ (attr_non_quoted | attr_quoted))? }
attr_quoted = _{ PUSH(quote) ~ attr_value ~ POP }
attr_non_quoted = @{ !quote ~ (!(WHITESPACE | tag_end) ~ ANY)* }
attr_key = { ASCII_ALPHA ~ text_chars* }
attr_value = { (!PEEK ~ ANY)* }

///
/// Elements
///
element_name = @{ ASCII_ALPHA ~ text_chars* }

// Self-closing elements AKA Void elements
// ie: <hr>
e_void_html = @{ ^"area" | ^"base" | ^"br" | ^"col" | ^"command" 
    | ^"embed" | ^"hr" | ^"img" | ^"input" | ^"keygen" | ^"link" | ^"meta" 
    | ^"param" | ^"source" | ^"track" | ^"wbr" | ^"meta" 
}
e_void_svg= @{ ^"path" | ^"polygon" | ^"rect" | ^"circle" }
void_element_name = @{ e_void_html | e_void_svg }
void_element = _{ lt ~ void_element_name ~ attr* ~ tag_end }

// Normal elements with a start and close
normal_element = _{ normal_element_start ~ (!normal_element_end ~ node)* ~ normal_element_end }
normal_element_start = _{ lt ~ PUSH(element_name) ~ attr* ~ gt }
normal_element_end = { lt_close ~ POP ~ gt }

// Raw text elements that might interfere with normal html
raw_element_name = { ^"style" | ^"script" | ^"title" | ^"text_area" }
raw_text_content = { (!raw_text_end ~ ANY )* }
raw_text_element = _{ raw_text_start ~ raw_text_content ~ raw_text_end }
raw_text_start = _{ lt ~ PUSH(raw_element_name) ~ attr* ~ gt }
raw_text_end = { lt_close ~ POP ~ gt }

// Dangling elements
dangling_element = { lt ~ element_name ~ gt }

///
/// Symbols and Characters
///
text_chars = _{ 'a'..'z' | 'A'..'Z' | "_" | "-" | ":" | ";" | '0'..'9' }

lt = _{ "<" }
lt_bang = _{ "<!" }
lt_close = _{ "</" }

gt = _{ ">" }
gt_close = _{ "/>" }
tag_end = _ { gt | gt_close }

equal = _{ "=" }
quote_double = _{ "\"" }
quote_single = _{ "\'" }
quote = { quote_double | quote_single }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
